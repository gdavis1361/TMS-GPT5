generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  hash      String
  role      Role     @default(USER)
  emailVerifiedAt DateTime?
  failedLoginCount Int      @default(0)
  lockedUntil      DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  refreshTokens RefreshToken[]
  emailTokens EmailVerificationToken[]
  resetTokens PasswordResetToken[]
  auditLogs   AuditLog[]
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model RefreshToken {
  id         String   @id @default(cuid())
  tokenId    String   @unique
  tokenHash  String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  revokedAt  DateTime?
  replacedBy String?
  userAgent  String?
  ip         String?
  lastUsedAt DateTime? @default(now())
}

model EmailVerificationToken {
  id         String   @id @default(cuid())
  tokenId    String   @unique
  tokenHash  String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  usedAt     DateTime?
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  tokenId    String   @unique
  tokenHash  String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  usedAt     DateTime?
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  event     String
  ip        String?
  userAgent String?
  metadata  Json?
  createdAt DateTime @default(now())
}

model Customer {
  id         String    @id @default(cuid())
  name       String
  email      String?   @unique
  phone      String?
  tags       String[]  @default([])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  locations  Location[]
  orders     Order[]
  documents  Document[]

  @@index([name])
}

model Location {
  id          String    @id @default(cuid())
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  name        String
  address1    String?
  address2    String?
  city        String?
  state       String?
  postalCode  String?
  country     String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@index([customerId])
}

enum OrderStatus {
  DRAFT
  PLACED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id          String      @id @default(cuid())
  customerId  String
  customer    Customer    @relation(fields: [customerId], references: [id], onDelete: Restrict)
  status      OrderStatus @default(DRAFT)
  totalCents  Int         @default(0)
  currency    String      @default("USD")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  documents   Document[]

  @@index([customerId])
  @@index([status])
}

model Document {
  id          String    @id @default(cuid())
  customerId  String?
  customer    Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  orderId     String?
  order       Order?    @relation(fields: [orderId], references: [id], onDelete: SetNull)
  filename    String
  mimeType    String
  size        Int
  storageKey  String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?

  @@index([customerId])
  @@index([orderId])
}

enum Role {
  USER
  ADMIN
}

